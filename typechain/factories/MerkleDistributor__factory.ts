/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleDistributor,
  MerkleDistributorInterface,
} from "../MerkleDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x20e4f869",
        type: "bytes32",
      },
    ],
    name: "c_0x20e4f869",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610f92380380610f928339818101604052604081101561003357600080fd5b8101908080519060200190929190805190602001909291905050506100807f8966734924031d2063e4cf1be1e895a1a6f1af93f5acea4333ab251c13259d7060001b61018e60201b60201c565b6100b27f6e6d70205c819b44a74fe0d772a4be8f1563ffb0f346da575b54a9bc4011c46760001b61018e60201b60201c565b6100e47fbb4ccbbdebc1227aee99d279a1a01ecaae5bee1c2185ebfa969ba9e13ffeb19d60001b61018e60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505061014d7f3e00a255c9a8f17a6855732c5262daf5620b362368397be55f091a926cf5e28260001b61018e60201b60201c565b61017f7fa229d323301e226234d4e4184a597201e20ef5b38604d3ee6d619ca1be2383bb60001b61018e60201b60201c565b8060a081815250505050610191565b50565b60805160601c60a051610dd16101c1600039806104ad528061087052508061063a5280610acd5250610dd16000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e7ba6ef1461005c5780632eb4a7ab1461010957806338934e8a146101275780639e34070f14610155578063fc0c546a1461019b575b600080fd5b6101076004803603608081101561007257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100c357600080fd5b8201836020820111156100d557600080fd5b803590602001918460208302840111640100000000831117156100f757600080fd5b90919293919293905050506101e5565b005b61011161086e565b6040518082815260200191505060405180910390f35b6101536004803603602081101561013d57600080fd5b8101908080359060200190929190505050610892565b005b6101816004803603602081101561016b57600080fd5b8101908080359060200190929190505050610895565b604051808215151515815260200191505060405180910390f35b6101a3610acb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102117f79f8dd6b7f01003d3885f2510fddb009f10dd34b4f9cebedaf53da7acd8d091560001b610892565b61023d7f0abcd5ab57afd580c8c7e08f4c5338973c857044ccf3e8f8dd8b169a02b1caae60001b610892565b6102697f3536104f73d6cf7f6bbdd1f74253f54a7a1d526413eca83ac9660d24a0274e1360001b610892565b6102957f0d35bfadfac54d95c1d803448ec2c4ef7f2a238c4efadaba1a68005bc89995c560001b610892565b61029e85610895565b156102f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d306028913960400191505060405180910390fd5b6103207fdc09329b06b4979ff5a5cc3507e2f3c288782e6a5bfab9d89a49ccb6ff55060160001b610892565b61034c7f754f9813474789989950aa85278f40c01bdfa3ba10a34e0cf3a1887b16a52ba660001b610892565b6103787fc3afe656a606b331600677927c141d0fb1f0ab79e98cc29cacde8bf1a45722ff60001b610892565b6000858585604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001935050505060405160208183030381529060405280519060200120905061040e7f42c01758c442a0945c389a94a4a25f6e9329ef185465e03aec56bfb2c035d99d60001b610892565b61043a7fcfe4f75f4937472b133253b4db89bd30394b2df464532b16a5a351231ceff25860001b610892565b6104667f3638c07f61ecb2ef433ec0469044a08c3b0360639889b97a55499374d1a6fb4b60001b610892565b6104d2838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f000000000000000000000000000000000000000000000000000000000000000083610aef565b610527576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610d586021913960400191505060405180910390fd5b6105537f11194dc8a5879fe3da4cd9a82016b7aeae5929de033758ce32321be0b305384460001b610892565b61057f7fad8335920cbd58f356490dfe4ca9eec5916aacc7ab17ca0f9067b188d49c127260001b610892565b6105ab7f5c00c4f7506310cb873f806ed95735095ef2eb952c325b3c6f647e506008567160001b610892565b6105b486610ba7565b6105e07f7595edddc339ab900ed832032a2081d5b90c19c551717623db81324d8b1c4d3a60001b610892565b61060c7f3e8b951aa323c96e19bbc99fecd7af3853c4f877d64682b0ad9a14406a218a3c60001b610892565b6106387f09c828b426c7751451afa795ef975373afcc17154e4fea1fe8590613f154c38960001b610892565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156106df57600080fd5b505af11580156106f3573d6000803e3d6000fd5b505050506040513d602081101561070957600080fd5b810190808051906020019092919050505061076f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610d796023913960400191505060405180910390fd5b61079b7f7c7fe739475264b5d2143464bb71847c7d28bbcb799a598c466bf9c75cd1ce8b60001b610892565b6107c77f839f1fb7ea550d1dc522f8163bfb98ec3accbda78d8a5bdc930b9946ea13809460001b610892565b6107f37fab79ba604d0e5a2ca9e141274b0d366a4a51b2178f554c3c8a96e3873fdfbf2860001b610892565b7f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed026868686604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b50565b60006108c37f974bbcd5b11b9893acee27a4e6845bb4a3ac44aa51a742688a81501a7996792f60001b610892565b6108ef7fab4196aa9c8867d1f16f9af5bd44935872016e6d110378f2202f9632a4cb8e2560001b610892565b61091b7f080b33b1d92aed813e9886886ef3cf58649a8586403a1aedec7f3dd7d2d1c45260001b610892565b6000610100838161092857fe5b0490506109577f9aa438a8cf0b25aaa24abd0331ad0527d969506951e8e50486fbd061e864a2a760001b610892565b6109837ffdeb2a5835ae71462701ee9996355432853b0dfc187d85c0eb5d9e885e73bd9b60001b610892565b6000610100848161099057fe5b0690506109bf7f2ca57e99ee3b85a2c77611dd424192e08cd8d46a1d1148e0a9b344e73989fac460001b610892565b6109eb7fb7ec65b9317c82bf001741584abc01c892f0d3e9197e674eaa6836087abcb5ca60001b610892565b6000806000848152602001908152602001600020549050610a2e7fb0b494b8b11b03ef08f9e5675ce4f67947788fcfe7c43d2c0450d590f5f2691660001b610892565b610a5a7ff0f5d8307b89374c137dc5d88646f51d090a96ee64dca483fadf6790df5c5a0060001b610892565b6000826001901b9050610a8f7ffb01ebd1b65698551016bd82f5167bd128bc35143e0e9deac956bbdbc8819f4f60001b610892565b610abb7f0a95e6d3170b3232ae4a05f27211c90e0beb3746de6add6c7e47557d0f40db0360001b610892565b8081831614945050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008082905060008090505b8551811015610b99576000868281518110610b1257fe5b60200260200101519050808311610b595782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610b8b565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b508080600101915050610afb565b508381149150509392505050565b610bd37f4fd0d7d6ec45effc725c5cc25a8f77af26cb3b162438c30d76837e02fe91363460001b610892565b610bff7f0e27d8a4eac8e124fe50c36bc713c57da83839a387617bb28756da0664e2f75460001b610892565b610c2b7fe37b57feae23e45d063457e488740d163231cc541b939e238b7b5a0fd309ce0f60001b610892565b60006101008281610c3857fe5b049050610c677f2cb8afaf1428f63f79ac3ccae5a978344e2f0fd069bea5f7a49e9e467e2b77b460001b610892565b610c937fb51bdd97ac024f676d03a0052278ebfb24185f515730dab4595aa0611e72240560001b610892565b60006101008381610ca057fe5b069050610ccf7f4bfe3289497c32190873e189eba390dcce04fbc2f77ab470903d5c432af4104360001b610892565b610cfb7fafb1dbf6120faff74d3e2a311222962147cd40d0e08c2a865fee9ef5186c6e5e60001b610892565b806001901b60008084815260200190815260200160002054176000808481526020019081526020016000208190555050505056fe4d65726b6c654469737472696275746f723a2044726f7020616c726561647920636c61696d65642e4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f662e4d65726b6c654469737472696275746f723a205472616e73666572206661696c65642ea264697066735822122000f96de95d9acd0b89d7446343c49a84683d6b08aafb1af65c2a20a1930d993e64736f6c634300060b0033";

export class MerkleDistributor__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    token_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleDistributor> {
    return super.deploy(
      token_,
      merkleRoot_,
      overrides || {}
    ) as Promise<MerkleDistributor>;
  }
  getDeployTransaction(
    token_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token_, merkleRoot_, overrides || {});
  }
  attach(address: string): MerkleDistributor {
    return super.attach(address) as MerkleDistributor;
  }
  connect(signer: Signer): MerkleDistributor__factory {
    return super.connect(signer) as MerkleDistributor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleDistributorInterface {
    return new utils.Interface(_abi) as MerkleDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleDistributor {
    return new Contract(address, _abi, signerOrProvider) as MerkleDistributor;
  }
}
